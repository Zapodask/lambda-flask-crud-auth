AWSTemplateFormatVersion: 2010-09-09
Description: Lambda + Api Gateway

Parameters:
  projectName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-project
  jwtSecretKey:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: KIJUHYTR5ET4RTGY7
  bucketName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-project-bucket-lambda-code
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev

Resources:
# Lambda
## Code bucket
  bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref bucketName

## IAM role
  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  -
                    dynamodb:PutItem
                  -
                    dynamodb:DeleteItem
                  -
                    dynamodb:GetItem
                  -
                    dynamodb:Scan
                  -
                    dynamodb:UpdateItem
                Resource: !GetAtt dynamoDbUsersTable.Arn

## Function
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json

          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Description: Lambda function
      FunctionName: !Sub ${projectName}-auth
      Handler: index.handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.9
      Environment:
        Variables: 
          PROJECT_NAME: !Ref projectName
          JWT_SECRET_KEY: !Ref jwtSecretKey
          JWT_REFRESH_TOKEN_EXPIRES: '1 day, 0:00:00'

## Logs
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${projectName}
      RetentionInDays: 90

# Api Gateway
  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Ref projectName

## Resources
  usersResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: users
      RestApiId: !Ref apiGateway

  usersIdResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !Ref usersResource
      PathPart: '{username}'
      RestApiId: !Ref apiGateway

  loginResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: login
      RestApiId: !Ref apiGateway

  changePasswordResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt apiGateway.RootResourceId
      PathPart: change-password
      RestApiId: !Ref apiGateway

## Methods
  usersMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref usersResource
      RestApiId: !Ref apiGateway

  usersMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref usersResource
      RestApiId: !Ref apiGateway

  usersIdMethodGet:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref usersIdResource
      RestApiId: !Ref apiGateway

  usersIdMethodDelete:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: DELETE
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref usersIdResource
      RestApiId: !Ref apiGateway

  loginMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref loginResource
      RestApiId: !Ref apiGateway

  changePasswordMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: PUT
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
      ResourceId: !Ref changePasswordResource
      RestApiId: !Ref apiGateway

## Deployment
  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - usersMethodGet
      - usersMethodPost
      - usersIdMethodGet
      - usersIdMethodDelete
      - loginMethodPost
      - changePasswordMethodPost
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref apiGatewayStageName

## Lambda permissions
  lambdaInvokeUsersGet:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/GET/users

  lambdaInvokeUsersPost:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/POST/users

  lambdaInvokeUsersIdGet:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/GET/users/{username}

  lambdaInvokeUsersIdDelete:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/DELETE/users/{username}

  lambdaInvokeLoginPost:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/POST/login

  lambdaInvokeChangePasswordPost:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${apiGatewayStageName}/PUT/change-password

# DynamoDB table
  dynamoDbUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${projectName}-users
      AttributeDefinitions: 
        - 
          AttributeName: username
          AttributeType: S
      KeySchema:
        -
          AttributeName: username
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
